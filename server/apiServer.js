// NOTE: this server is purely a dev-mode server. In production,
// server/index.js also serves the API routes.

// Configure process.env with .env.* files
require('./env').configureEnv();

const express = require('express');
const compression = require('compression');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const cors = require('cors');

const apiRouter = require('./apiRouter');
const wellKnownRouter = require('./wellKnownRouter');
const webmanifestResourceRoute = require('./resources/webmanifest');
const robotsTxtRoute = require('./resources/robotsTxt');
const sitemapResourceRoute = require('./resources/sitemap');

// ---------- Stripe webhook handler (expects ./stripeWebhook.js) ----------
const stripeWebhookHandler = require('./stripeWebhook'); // implement per earlier message

const radix = 10;
const PORT = parseInt(process.env.REACT_APP_DEV_API_SERVER_PORT, radix) || 3500; // sensible default for dev

const app = express();

// ---------- CORS (dev server runs on a separate port) ----------
const allowedOrigins = [
  process.env.REACT_APP_MARKETPLACE_ROOT_URL, // e.g. http://localhost:3000
  'http://localhost:3000',
  'https://dev.haulsaver.com',
  'https://www.haulsaver.com',
].filter(Boolean);

app.use(
  cors({
    origin(origin, callback) {
      // Allow non-browser requests (e.g., curl, Stripe webhooks) which have no Origin
      if (!origin) return callback(null, true);
      if (allowedOrigins.includes(origin)) return callback(null, true);
      return callback(new Error(`CORS blocked for origin: ${origin}`));
    },
    credentials: true,
  })
);

app.use(cookieParser());

// ---------- WELL-KNOWN & STATIC-LIKE RESOURCES ----------
app.use('/.well-known', wellKnownRouter);

// ---------- IMPORTANT: Stripe webhook must receive the *raw* body BEFORE any JSON parser ----------
app.post('/api/stripe/webhook', bodyParser.raw({ type: 'application/json' }), stripeWebhookHandler);

// ---------- JSON parser for all other routes ----------
app.use(bodyParser.json());

// Mount API router (includes /api/stripe/create-profile-unlock-intent and others)
app.use('/api', apiRouter);

// When developing with "yarn run dev", you can reach the manifest from:
//   http://localhost:3500/site.webmanifest
// The corresponding <link> element is set in src/components/Page/Page.js
app.get('/site.webmanifest', webmanifestResourceRoute);

// robots.txt and sitemap-* fetches should return similarly compressed data as server/index.js
app.use(compression());

// robots.txt is generated by resources/robotsTxt.js
// It creates the sitemap URL with the correct marketplace URL
app.get('/robots.txt', robotsTxtRoute);

// Handle different sitemap-* resources. E.g. /sitemap-index.xml
app.get('/sitemap-:resource', sitemapResourceRoute);

// Optional: simple health check for uptime monitors
app.get('/api/health', (_req, res) =>
  res.json({ ok: true, env: process.env.APP_ENV || 'development' })
);

app.listen(PORT, () => {
  console.log(`API server listening on ${PORT}`);
  console.log('Allowed CORS origins:', allowedOrigins.join(', '));
  console.log('Stripe webhook mounted at: /api/stripe/webhook');
});
